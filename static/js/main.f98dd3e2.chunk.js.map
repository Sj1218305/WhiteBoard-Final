{"version":3,"sources":["logo.svg","components/board/Board.jsx","components/container/SetColor.jsx","components/container/Undo.jsx","components/container/SetLineWidth.jsx","components/container/LineTool.jsx","components/container/Clear.jsx","components/container/Pencil.jsx","components/container/SnapShot.jsx","components/container/Container.jsx","App.js","index.js"],"names":["Board","props","this","drawOnCanvas","canvas","document","getElementById","ctx","getContext","sketch","querySelector","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","undo","pathsry","checkboxChecked","toggle_line","toggle_pencil","pen_checkbox","pencilBtn","oMousePos","evt","ClientRect","getBoundingClientRect","x","Math","round","clientX","left","y","clientY","top","addEventListener","checked","lineCap","drawing","points","mouse","previous","e","push","main_draw","beginPath","moveTo","lineTo","stroke","strokeStyle","color","removeEventListener","Draw","splice","clearRect","forEach","path","i","length","colorel","value","buttons","getElementsByClassName","lineWidth","innerText","checkbox","coordinates","Clicked","console","log","drawLine","className","id","React","Component","SetColor","type","Undo","SetLineWidth","LineTool","class","Clear","Pencil","TakeSnapShot","link","getAttribute","createElement","download","href","toDataURL","replace","click","SnapShot","onClick","Container","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f98dd3e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createContext } from \"react\"\nimport './style.css'\n\n\nclass Board extends React.Component\n{\n        constructor(props){\n            super(props)\n        }\n        componentDidMount(){\n            this.drawOnCanvas();\n        }\n\n        drawOnCanvas(){\n        \n          const canvas = document.getElementById('board');\n          const ctx = canvas.getContext('2d');\n          var sketch = document.querySelector('#sketch');\n          var sketch_style = getComputedStyle(sketch);\n          canvas.width = parseInt(sketch_style.getPropertyValue('width'));            canvas.height=200;\n          canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n          const undo = document.getElementById('undo');\n          let pathsry = [];\n          var checkboxChecked = false;\n          var toggle_line = true;\n          var toggle_pencil =true;\n          var pen_checkbox = false;\n          \n\n          // var Text=false\n    \n        \n       \n\n        const pencilBtn=document.getElementById('Pencil')\n         \n        pencilBtn.addEventListener('click',()=>{\n          pen_checkbox = pencilBtn.checked\n          if(pen_checkbox){\n          toggle_pencil=true;\n          toggle_line = false\n          }\n          Draw();\n        \n        })\n\n        function Draw(){\n          \n          ctx.lineCap = 'round';\n          // ctx.strokeStyle = color;\n          let drawing = false;\n          \n          let points = [];\n          \n          var mouse = {x: 0, y: 0};\n          var previous = {x: 0, y: 0};\n          \n          canvas.addEventListener('mousedown', function(e) {\n          drawing = true; \n          previous = {x:mouse.x,y:mouse.y};\n          mouse = oMousePos(canvas, e);\n          points = [];\n          points.push({x:mouse.x,y:mouse.y})\n          });\n          \n          canvas.addEventListener('mousemove', function main_draw(e) {\n\n          if (pen_checkbox){\n            if(drawing){\n            previous = {x:mouse.x,y:mouse.y};\n            mouse = oMousePos(canvas, e);\n            // saving the points in the points array\n            points.push({x:mouse.x,y:mouse.y})\n            // drawing a line from the previous point to the current point\n            ctx.beginPath();\n            ctx.moveTo(previous.x,previous.y);\n            ctx.lineTo(mouse.x,mouse.y);\n            ctx.stroke();\n            ctx.strokeStyle=color;\n            }\n          }\n          else if (!pen_checkbox || !toggle_pencil){\n            canvas.removeEventListener('mousemove',main_draw)\n\n          }\n\n          }, false);\n          \n          \n          canvas.addEventListener('mouseup', function() {\n          drawing=false;\n          // Adding the path to the array or the paths\n          pathsry.push(points);\n          }, false);\n        }\n          \n          undo.addEventListener(\"click\",Undo);\n          \n          function drawPaths(){\n            // delete everything\n            ctx.clearRect(0,0,canvas.width,canvas.height);\n            // draw all the paths in the paths array\n            pathsry.forEach(path=>{\n            ctx.beginPath();\n            ctx.moveTo(path[0].x,path[0].y);  \n            for(let i = 1; i < path.length; i++){\n              ctx.lineTo(path[i].x,path[i].y); \n            }\n              ctx.stroke();\n            })\n          }  \n          \n          function Undo(){\n            // remove the last path from the paths array\n            pathsry.splice(-1,1);\n            // draw all the paths in the paths array\n            drawPaths();\n          }\n          \n          \n          // a function to detect the mouse position\n          function oMousePos(canvas, evt) {\n            var ClientRect = canvas.getBoundingClientRect();\n              return { //objeto\n              x: Math.round(evt.clientX - ClientRect.left),\n              y: Math.round(evt.clientY - ClientRect.top)\n          }\n          }\n          \n          \n          \n          // Color change\n          var colorel = document.getElementById('setcolor')\n          var color = \"#000000\"\n          colorel.addEventListener('input',()=>{\n              color = colorel.value\n              \n              \n          })\n            /* Change Pen Width */\n          const buttons = document.getElementsByClassName('btn');\n          for (let x = 0; x < buttons.length; x++) {\n              buttons[x].addEventListener('click', () => {\n              ctx.lineWidth = parseInt(buttons[x].innerText);\n              });\n          }\n          //Clear Board\n          const clearBtn= document.getElementById('clear')\n          clearBtn.addEventListener('click',() => {\n              ctx.clearRect(0,0,canvas.width,canvas.height);\n              pathsry = []\n              //for text box\n              // console.log(document.getElementById('info'))\n              // document.getElementById('info').remove();\n\n          })\n          /* Draw Line*/\n          \n          const checkbox = document.getElementById('line-tool'); \n          checkbox.addEventListener('click', (e) => {\n            checkboxChecked = checkbox.checked;\n            if(checkboxChecked){\n              toggle_line = true\n              toggle_pencil = false\n              pen_checkbox = false\n            }\n      \n              drawLine();\n    \n            // else{\n            //   canvas.removeEventListener('click',)\n            // }\n          })\n\n\n          function drawLine() {\n            var points=[]\n            var coordinates = [];\n            canvas.addEventListener('click',function Clicked(e){\n              coordinates.push(oMousePos(canvas, e));\n              console.log(checkboxChecked)\n              if (coordinates.length == 2 && checkboxChecked ) {\n                // make the line\n                ctx.beginPath();\n                ctx.moveTo(coordinates[0].x, coordinates[0].y);\n                \n                ctx.lineTo(coordinates[1].x, coordinates[1].y);\n                \n                ctx.strokeStyle = colorel.value \n                ctx.stroke();\n                //set coordinates to []\n                coordinates = [];\n                \n              }\n              else if (!checkboxChecked || !toggle_line){\n                canvas.removeEventListener('click',Clicked)\n              }\n            })\n          }\n\n\n    \n                     //Text\n               \n    //       const TextToggle=document.getElementById('Text')\n         \n    //       TextToggle.addEventListener('click',()=>{\n    //           Text= true\n    //           console.log(Text)\n           \n    //       if(Text){\n    //       console.log('inhere')\n    //       var textarea=null\n    //       function mouseDownOnTextarea(e) {\n    //         console.log('textarea')\n    //         var x = textarea.offsetLeft - e.clientX,\n    //             y = textarea.offsetTop - e.clientY;\n    //         function drag(e) {\n    //             textarea.style.left = e.clientX + x + 'px';\n    //             textarea.style.top = e.clientY + y + 'px';\n    //         }\n    //         function stopDrag() {\n\n    //             document.removeEventListener('mousemove', drag);\n    //             document.removeEventListener('mouseup', stopDrag);\n    //         }\n    //         document.getElementById('board').addEventListener('mousedown', drag);\n    //         document.getElementById('board').addEventListener('mouseup', stopDrag);\n    //     }\n        \n    //     canvas.addEventListener('click', function(e) {\n    //       console.log('canvas click')\n    //         if (!textarea) {\n    //             textarea = document.createElement('textarea');\n    //             textarea.className = 'info';\n    //             textarea.id = 'info'\n    //             textarea.addEventListener('mousedown', mouseDownOnTextarea);\n    //             document.getElementById(\"sketch\").appendChild(textarea);\n    //         }\n    //         var x = e.clientX - canvas.offsetLeft,\n    //             y = e.clientY - canvas.offsetTop;\n    //         textarea.value = \"x: \" + x + \" y: \" + y;\n    //         textarea.style.top = e.clientY + 'px';\n    //         textarea.style.left = e.clientX + 'px';\n    //     }, false);\n    //     Text=false;\n    //   }\n    // })\n         \n};\n\n            \n        \n\n        render(){\n            return(\n                <div className=\"sketch\" id=\"sketch\">\n                    <canvas className=\"board\" id='board'></canvas>\n                </div>\n            )\n        }\n}\nexport default Board","import React from \"react\"\n\nfunction SetColor(){\n    return (\n\n        <div>\n        <input type='color' id='setcolor'></input>\n        <p>Color Picker</p>\n        </div>\n    )\n    }\n\nexport default SetColor ","import { func } from \"prop-types\"\nimport React from \"react\"\n\nfunction Undo(){\n        return(\n            <button id=\"undo\" className=\"style\">Undo</button>\n        )\n    }\n\n\nexport default Undo ","import React from 'react'\n\nfunction SetLineWidth() {\n    return (\n\n    \n    \n    \n    \n     <div className=\"set-line-width\">\n        {/* <p>Stroke Width</p> */}\n        \n        <button className=\"btn stylebtn\" id=\"1\">1</button>\n        <button className=\"btn stylebtn\"  id=\"2\">2</button>\n        <button className=\"btn stylebtn\" id=\"3\">3</button>\n         <button className=\"btn stylebtn\" id=\"4\">4</button>\n         <button className=\"btn stylebtn\" id=\"5\">5</button>\n         <button className=\"btn stylebtn\" id=\"6\">6</button>\n         <button className=\"btn stylebtn\" id=\"7\">7</button>\n        <button className=\"btn stylebtn\" id=\"8\">8</button>\n        <button className=\"btn stylebtn\" id=\"9\">9</button>\n        <p>Pen Size</p>\n     </div> \n    )\n}\n\nexport default SetLineWidth","import React from 'react'\n\nfunction LineTool() {\n    return (\n        <label class=\"script\">\n            Line            \n        <input id=\"line-tool\" type=\"checkbox\"></input>\n        <span className=\"geekmark\"></span>\n        <i class=\"fas fa-grip-lines\"></i>\n        </label>\n    )\n}\n\n\nexport default LineTool","import React from 'react'\n\nfunction Clear(){\n    return (\n        <button id=\"clear\" className=\"style\">Clear</button>\n    )\n}\n\nexport default Clear ","import React from \"react\"\n\nfunction Pencil(){\n        return(\n            <label class=\"script\">\n                Pen\n            <input type=\"checkbox\" id=\"Pencil\"></input>\n            <span className=\"geekmark\"></span>\n            <i class=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n            </label>\n        )\n    }\n\nexport default Pencil ","import React from 'react'\n\nfunction TakeSnapShot(){\t\n\tconst canvas = document.getElementById(\"board\");\n\tconst width = canvas.getAttribute(\"width\");\n\tconst height = canvas.getAttribute(\"height\");\n\tvar link = document.createElement('a');\n\tlink.download = \"screenshot.png\";\n\tlink.href = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");;\n\tlink.click();\n}\n\nfunction SnapShot() {\n    return (\n    <div className=\"take-snapshot\">\n        <button className=\"snapshot-button\" onClick = {TakeSnapShot}> Take A Snapshot</button>\n    </div>\n    )\n}\n\nexport default SnapShot","import React from 'react';\nimport Board from '../board/Board'\nimport './style.css'\nimport SetColor from './SetColor';\nimport Undo from './Undo';\nimport SetLineWidth from './SetLineWidth'\nimport LineTool from './LineTool';\nimport Clear from './Clear';\nimport Pencil from './Pencil';\nimport SnapShot from './SnapShot';\n\nclass Container extends React.Component\n{\n    constructor(props){\n    super(props)\n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n                <div className=\"bottom-bar\">\n                <div className=\"color-picker-container resize\">\n                    <SetColor/>\n                    \n                </div>\n\n                <div className=\"Undo-btn resize\">\n                    <Undo/>\n                </div>\n                <div className=\"Undo-btn resize\">\n                    <SnapShot/>\n                </div>\n                <div className=\"Redo-btn resize\">\n                    <Pencil/>\n                </div>\n                <div className=\"setlinewidth resize\">\n                    <SetLineWidth/>\n                </div>\n                <div className=\"Clear-btn resize\">\n                    <Clear/>\n                </div>\n                <div className=\"Line-btn resize\">\n                    <LineTool/>\n                </div>\n                </div>\n                <div className=\"board-container resize\">\n                    <Board></Board>\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nexport default Container","import logo from './logo.svg';\nimport './App.css';\nimport Container from './components/container/Container';\n\nfunction App() {\n  return (\n    <Container/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}